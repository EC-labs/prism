#!/home/diogo/.local/bin/bpftrace

#include <linux/stat.h>
#include <linux/fs.h>

BEGIN 
/ str($2) == "debug" /
{
    @pids[$1] = 1;
}

tracepoint:syscalls:sys_enter_access
/ pid == $1 /
{
    $filename = str(args->filename);
    if ($filename != "metric-collector-new-pid") {
        return;
    }

    $new_pid = (uint32) args->mode;
    if (!@pids[$new_pid]) {
        @pids[$new_pid] = 1;
    }
}

kfunc:vmlinux:vfs_read
{
    $inode = (struct inode *)args->file->f_inode;
    $mode = $inode->i_mode;

    if (($mode & S_IFMT) == S_IFIFO) {
        $i_id = $inode->i_ino;
        $s_dev = $inode->i_sb->s_dev;

        if (!@pipes[$s_dev, $i_id]) {
            if (@pids[pid]) {
                @pipes[$s_dev, $i_id] = 1;
            }
        } 

        if (!@pipes[$s_dev, $i_id]) {
            return;
        }

        if (!@pids[pid]) {
            printf("%s\t%s\t%lld\n", 
                   "NewProcess", comm, pid);
            @pids[pid] = 1
        }

        @start_fifo[tid, $s_dev, $i_id] = nsecs;
        printf("%s\t%lld\t%lld\t%lld\t%lld\n", 
               "FifoReadStart", tid, $s_dev, $i_id, @start_fifo[tid, $s_dev, $i_id]);
    } 
}

kretfunc:vmlinux:vfs_read 
{
    $inode = (struct inode *)args->file->f_inode;
    $mode = $inode->i_mode;

    if (($mode & S_IFMT) == S_IFIFO) {
        $i_id = $inode->i_ino;
        $s_dev = $inode->i_sb->s_dev;

        if (!@start_fifo[tid, $s_dev, $i_id]) {
            return;
        }

        printf("%s\t%lld\t%lld\t%lld\t%lld\n", 
               "FifoReadEnd", tid, $s_dev, $i_id, nsecs - @start_fifo[tid, $s_dev, $i_id]);
        delete(@start_fifo[tid, $s_dev, $i_id]);
    }    
}

kfunc:vmlinux:vfs_write
{
    $inode = (struct inode *)args->file->f_inode;
    $mode = $inode->i_mode;

    if (($mode & S_IFMT) == S_IFIFO) {
        $i_id = $inode->i_ino;
        $s_dev = $inode->i_sb->s_dev;

        if (!@pipes[$s_dev, $i_id]) {
            if (@pids[pid]) {
                @pipes[$s_dev, $i_id] = 1;
            }
        } 

        if (!@pipes[$s_dev, $i_id]) {
            return;
        }

        if (!@pids[pid]) {
            printf("%s\t%lld\n", 
                   "NewProcess", pid);
            @pids[pid] = 1
        }

        @start_fifo[tid, $s_dev, $i_id] = nsecs;
        printf("%s\t%lld\t%lld\t%lld\t%lld\n", 
               "FifoWriteStart", tid, $s_dev, $i_id, @start_fifo[tid, $s_dev, $i_id]);
    }
}

kretfunc:vmlinux:vfs_write 
{
    $inode = (struct inode *)args->file->f_inode;
    $mode = $inode->i_mode;

    if (($mode & S_IFMT) == S_IFIFO) {
        $i_id = $inode->i_ino;
        $s_dev = $inode->i_sb->s_dev;

        if (!@start_fifo[tid, $s_dev, $i_id]) {
            return;
        }

        printf("%s\t%lld\t%lld\t%lld\t%lld\n", 
               "FifoWriteEnd", tid, $s_dev, $i_id, nsecs - @start_fifo[tid, $s_dev, $i_id]);
        delete(@start_fifo[tid, $s_dev, $i_id]);
    }
}

END 
{
    clear(@start_fifo);
    clear(@pipes);
    clear(@pids);
}
