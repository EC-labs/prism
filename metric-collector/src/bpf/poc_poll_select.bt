bpftrace -e '
    kfunc:do_select
    / comm == "tlpi_select" /
    {
        @fds[tid] = (args->n, nsecs);
        @io_multi_idx[tid] = 0;
    }

    kretfunc:do_select 
    / @fds[tid].1 / 
    {
        $terminate = nsecs;
        $i = 0;
        while ($i < 256) {
            $value = @io_multi[tid, $i];
            @inode_map[tid, $value.0, $value.1, $value.2] += $terminate - $value.3;
            delete(@inode_pending[tid, $value.0, $value.1, $value.2]);
            delete(@io_multi[tid, $i]);

            $i++;
            if ($i >= @fds[tid].0) {
                break;
            }
        }

        delete(@fds[tid]);
        delete(@io_multi_idx[tid]);
    }

    kretfunc:__fdget
    / @fds[tid].0 /
    {
        if (@io_multi_idx[tid] >= @fds[tid].0) {
            return;
        }

        $ret = retval;
        $file = (struct file *) ($ret & (~3));
        $sb_id = $file->f_inode->i_sb->s_id;
        $dev = $file->f_inode->i_sb->s_dev;
        $i_id = $file->f_inode->i_ino;

        $pending_instant = nsecs;

        @io_multi[tid, @io_multi_idx[tid]] = ($sb_id, $dev, $i_id, $pending_instant);
        @inode_pending[tid, $sb_id, $dev, $i_id] = $pending_instant;
        @io_multi_idx[tid]++;
    }

    interval:s:1
    {
        print(@inode_pending);
        print(@inode_map);
    }
'

bpftrace -e '
    kfunc:do_sys_poll
    / comm == "tlpi_poll" /
    {
        @fds[tid] = (args->nfds, nsecs);
        @io_multi_idx[tid] = 0;
    }

    kretfunc:do_sys_poll 
    / @fds[tid].1 / 
    {
        $terminate = nsecs;
        $i = (uint32) 0;
        while ($i < 256) {
            $value = @io_multi[tid, $i];
            @inode_map[tid, $value.0, $value.1, $value.2] += $terminate - $value.3;
            delete(@inode_pending[tid, $value.0, $value.1, $value.2]);
            delete(@io_multi[tid, $i]);

            $i++;
            if ($i >= @fds[tid].0) {
                break;
            }
        }

        delete(@fds[tid]);
        delete(@io_multi_idx[tid]);
    }

    kretfunc:__fdget
    / @fds[tid].0 /
    {
        if (((uint32) @io_multi_idx[tid]) >= @fds[tid].0) {
            return;
        }

        $ret = retval;
        $file = (struct file *) ($ret & (~3));
        $sb_id = $file->f_inode->i_sb->s_id;
        $dev = $file->f_inode->i_sb->s_dev;
        $i_id = $file->f_inode->i_ino;

        $pending_instant = nsecs;

        @io_multi[tid, @io_multi_idx[tid]] = ($sb_id, $dev, $i_id, $pending_instant);
        @inode_pending[tid, $sb_id, $dev, $i_id] = $pending_instant;
        @io_multi_idx[tid]++;
    }
'
